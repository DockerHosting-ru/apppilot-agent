#!/usr/bin/env python3
"""
AppPilot Agent - Wait for Configuration Mode
–ê–≥–µ–Ω—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç –≤ —Ä–µ–∂–∏–º–µ –æ–∂–∏–¥–∞–Ω–∏—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –ø–æ—Å–ª–µ —É—Å—Ç–∞–Ω–æ–≤–∫–∏
"""

import os
import sys
import time
import yaml
import json
import logging
import signal
import threading
from pathlib import Path
from typing import Dict, Any, Optional
import subprocess
import requests
from datetime import datetime

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    handlers=[
        logging.FileHandler('/var/log/apppilot-agent-wait.log'),
        logging.StreamHandler()
    ]
)
logger = logging.getLogger(__name__)

class AppPilotAgentWait:
    """–ê–≥–µ–Ω—Ç AppPilot –≤ —Ä–µ–∂–∏–º–µ –æ–∂–∏–¥–∞–Ω–∏—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏"""
    
    def __init__(self):
        self.config_file = Path("/opt/apppilot-agent/config.yml")
        self.agent_dir = Path("/opt/apppilot-agent")
        self.running = True
        self.config = {}
        self.config_loaded = False
        
        # –°–∏–≥–Ω–∞–ª—ã –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
        signal.signal(signal.SIGINT, self.signal_handler)
        signal.signal(signal.SIGTERM, self.signal_handler)
        
        # HTTP —Å–µ—Ä–≤–µ—Ä –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
        self.http_server = None
        
    def signal_handler(self, signum, frame):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–∏–≥–Ω–∞–ª–æ–≤ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è"""
        logger.info(f"–ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª {signum}, –∑–∞–≤–µ—Ä—à–∞–µ–º —Ä–∞–±–æ—Ç—É...")
        self.running = False
        if self.http_server:
            self.http_server.shutdown()
        sys.exit(0)
    
    def start_config_server(self):
        """–ó–∞–ø—É—Å–∫ HTTP —Å–µ—Ä–≤–µ—Ä–∞ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏"""
        try:
            from http.server import HTTPServer, BaseHTTPRequestHandler
            import socketserver
            
            class ConfigHandler(BaseHTTPRequestHandler):
                def __init__(self, *args, agent_instance=None, **kwargs):
                    self.agent = agent_instance
                    super().__init__(*args, **kwargs)
                
                def do_POST(self):
                    """–ü–æ–ª—É—á–µ–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏"""
                    if self.path == '/config':
                        content_length = int(self.headers['Content-Length'])
                        post_data = self.rfile.read(content_length)
                        
                        try:
                            config = json.loads(post_data.decode('utf-8'))
                            logger.info(f"–ü–æ–ª—É—á–µ–Ω–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è: {config}")
                            
                            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
                            if self.agent.save_config(config):
                                self.send_response(200)
                                self.send_header('Content-type', 'application/json')
                                self.end_headers()
                                response = {'status': 'success', 'message': 'Configuration saved'}
                                self.wfile.write(json.dumps(response).encode())
                            else:
                                self.send_response(500)
                                self.send_header('Content-type', 'application/json')
                                self.end_headers()
                                response = {'status': 'error', 'message': 'Failed to save configuration'}
                                self.wfile.write(json.dumps(response).encode())
                                
                        except Exception as e:
                            logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏: {e}")
                            self.send_response(400)
                            self.send_header('Content-type', 'application/json')
                            self.end_headers()
                            response = {'status': 'error', 'message': str(e)}
                            self.wfile.write(json.dumps(response).encode())
                    else:
                        self.send_response(404)
                        self.end_headers()
                
                def do_GET(self):
                    """–°—Ç–∞—Ç—É—Å –∞–≥–µ–Ω—Ç–∞"""
                    if self.path == '/status':
                        self.send_response(200)
                        self.send_header('Content-type', 'application/json')
                        self.end_headers()
                        
                        status = {
                            'status': 'waiting_for_config' if not self.agent.config_loaded else 'configured',
                            'timestamp': datetime.now().isoformat(),
                            'config_loaded': self.agent.config_loaded
                        }
                        self.wfile.write(json.dumps(status).encode())
                    else:
                        self.send_response(404)
                        self.end_headers()
                
                def log_message(self, format, *args):
                    """–û—Ç–∫–ª—é—á–µ–Ω–∏–µ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–≥–æ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è HTTP —Å–µ—Ä–≤–µ—Ä–∞"""
                    pass
            
            # –°–æ–∑–¥–∞–µ–º —Å–µ—Ä–≤–µ—Ä
            handler = type('ConfigHandler', (ConfigHandler,), {'agent_instance': self})
            self.http_server = HTTPServer(('0.0.0.0', 8000), handler)
            
            logger.info("üöÄ HTTP —Å–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ –ø–æ—Ä—Ç—É 8000")
            logger.info("‚è≥ –û–∂–∏–¥–∞–µ–º –∑–∞–≥—Ä—É–∑–∫—É –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏...")
            
            # –ó–∞–ø—É—Å–∫–∞–µ–º —Å–µ—Ä–≤–µ—Ä –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ
            server_thread = threading.Thread(target=self.http_server.serve_forever)
            server_thread.daemon = True
            server_thread.start()
            
            return True
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ HTTP —Å–µ—Ä–≤–µ—Ä–∞: {e}")
            return False
    
    def save_config(self, config: Dict[str, Any]) -> bool:
        """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏"""
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è
            required_fields = ['agent_id', 'central_server', 'agent_token', 'vps_id']
            for field in required_fields:
                if field not in config:
                    logger.error(f"–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ–µ –ø–æ–ª–µ: {field}")
                    return False
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
            with open(self.config_file, 'w') as f:
                yaml.dump(config, f, default_flow_style=False)
            
            self.config = config
            self.config_loaded = True
            
            logger.info(f"‚úÖ –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞: {config['agent_id']}")
            return True
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏: {e}")
            return False
    
    def wait_for_config(self):
        """–û–∂–∏–¥–∞–Ω–∏–µ –∑–∞–≥—Ä—É–∑–∫–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏"""
        logger.info("‚è≥ –û–∂–∏–¥–∞–µ–º –∑–∞–≥—Ä—É–∑–∫—É –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏...")
        
        while self.running and not self.config_loaded:
            try:
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–∞–π–ª –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
                if self.config_file.exists():
                    with open(self.config_file, 'r') as f:
                        config = yaml.safe_load(f)
                    
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –≤—Å–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –∑–∞–≥—Ä—É–∂–µ–Ω—ã
                    if config and all([
                        config.get('agent_id') != 'PLACEHOLDER',
                        config.get('central_server') != 'PLACEHOLDER',
                        config.get('agent_token') != 'PLACEHOLDER',
                        config.get('vps_id') != 'PLACEHOLDER'
                    ]):
                        self.config = config
                        self.config_loaded = True
                        logger.info(f"‚úÖ –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –∑–∞–≥—Ä—É–∂–µ–Ω–∞ –∏–∑ —Ñ–∞–π–ª–∞: {config['agent_id']}")
                        break
                
                time.sleep(10)
                
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏: {e}")
                time.sleep(10)
    
    def start_main_agent(self):
        """–ó–∞–ø—É—Å–∫ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –∞–≥–µ–Ω—Ç–∞ —Å –∑–∞–≥—Ä—É–∂–µ–Ω–Ω–æ–π –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–µ–π"""
        try:
            logger.info("üöÄ –ó–∞–ø—É—Å–∫–∞–µ–º –æ—Å–Ω–æ–≤–Ω–æ–π AppPilot Agent...")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –æ—Å–Ω–æ–≤–Ω–æ–π –∞–≥–µ–Ω—Ç —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω
            main_agent_script = self.agent_dir / "agent_compose_support.py"
            if not main_agent_script.exists():
                logger.error("‚ùå –û—Å–Ω–æ–≤–Ω–æ–π –∞–≥–µ–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω")
                return False
            
            # –ó–∞–ø—É—Å–∫–∞–µ–º –æ—Å–Ω–æ–≤–Ω–æ–π –∞–≥–µ–Ω—Ç
            env = os.environ.copy()
            env.update({
                'AGENT_ID': self.config['agent_id'],
                'CENTRAL_SERVER': self.config['central_server'],
                'AGENT_TOKEN': self.config['agent_token'],
                'VPS_ID': str(self.config['vps_id'])
            })
            
            # –ó–∞–ø—É—Å–∫–∞–µ–º –æ—Å–Ω–æ–≤–Ω–æ–π –∞–≥–µ–Ω—Ç
            process = subprocess.Popen([
                sys.executable, str(main_agent_script)
            ], env=env, cwd=str(self.agent_dir))
            
            logger.info(f"‚úÖ –û—Å–Ω–æ–≤–Ω–æ–π –∞–≥–µ–Ω—Ç –∑–∞–ø—É—â–µ–Ω (PID: {process.pid})")
            
            # –ñ–¥–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
            process.wait()
            return True
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –∞–≥–µ–Ω—Ç–∞: {e}")
            return False
    
    def run(self):
        """–û—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª —Ä–∞–±–æ—Ç—ã"""
        try:
            logger.info("üöÄ AppPilot Agent Wait Mode –∑–∞–ø—É—â–µ–Ω")
            
            # –ó–∞–ø—É—Å–∫–∞–µ–º HTTP —Å–µ—Ä–≤–µ—Ä –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
            if not self.start_config_server():
                logger.error("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–ø—É—Å—Ç–∏—Ç—å HTTP —Å–µ—Ä–≤–µ—Ä")
                return False
            
            # –û–∂–∏–¥–∞–µ–º –∑–∞–≥—Ä—É–∑–∫—É –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
            self.wait_for_config()
            
            if not self.config_loaded:
                logger.error("‚ùå –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω–∞")
                return False
            
            # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º HTTP —Å–µ—Ä–≤–µ—Ä
            if self.http_server:
                self.http_server.shutdown()
                logger.info("üõë HTTP —Å–µ—Ä–≤–µ—Ä –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
            
            # –ó–∞–ø—É—Å–∫–∞–µ–º –æ—Å–Ω–æ–≤–Ω–æ–π –∞–≥–µ–Ω—Ç
            return self.start_main_agent()
            
        except Exception as e:
            logger.error(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
            return False

def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    agent = AppPilotAgentWait()
    
    try:
        success = agent.run()
        if success:
            logger.info("‚úÖ AppPilot Agent —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–∏–ª —Ä–∞–±–æ—Ç—É")
            sys.exit(0)
        else:
            logger.error("‚ùå AppPilot Agent –∑–∞–≤–µ—Ä—à–∏–ª—Å—è —Å –æ—à–∏–±–∫–æ–π")
            sys.exit(1)
    except KeyboardInterrupt:
        logger.info("üõë –†–∞–±–æ—Ç–∞ –ø—Ä–µ—Ä–≤–∞–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
        sys.exit(0)
    except Exception as e:
        logger.error(f"‚ùå –ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞: {e}")
        sys.exit(1)

if __name__ == "__main__":
    main()
