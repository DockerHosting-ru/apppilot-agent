#!/usr/bin/env python3
"""
AppPilot Agent - Main Working Agent
–û—Å–Ω–æ–≤–Ω–æ–π –∞–≥–µ–Ω—Ç –∫–æ—Ç–æ—Ä—ã–π –ø–æ–¥–∫–ª—é—á–∞–µ—Ç—Å—è –∫ —Å–µ—Ä–≤–µ—Ä—É –∏ –≤—ã–ø–æ–ª–Ω—è–µ—Ç –∑–∞–¥–∞—á–∏
"""

import os
import sys
import time
import yaml
import json
import logging
import signal
import requests
from pathlib import Path
from typing import Dict, Any, Optional
from datetime import datetime
import docker
import docker.errors
import subprocess

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    handlers=[
        logging.StreamHandler()  # –¢–æ–ª—å–∫–æ –≤—ã–≤–æ–¥ –≤ –∫–æ–Ω—Å–æ–ª—å –¥–ª—è Docker
    ]
)
logger = logging.getLogger(__name__)

class AppPilotAgent:
    """–û—Å–Ω–æ–≤–Ω–æ–π —Ä–∞–±–æ—á–∏–π AppPilot –∞–≥–µ–Ω—Ç"""
    
    def __init__(self):
        self.config_file = Path("/opt/apppilot/config.yml")
        self.running = True
        self.config = {}
        self.session = requests.Session()
        self.docker_client = None
        
        # –°–∏–≥–Ω–∞–ª—ã –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
        signal.signal(signal.SIGINT, self.signal_handler)
        signal.signal(signal.SIGTERM, self.signal_handler)
        
        # –ó–∞–≥—Ä—É–∂–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
        self.load_config()
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º Docker –∫–ª–∏–µ–Ω—Ç
        self.init_docker()
        
    def signal_handler(self, signum, frame):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–∏–≥–Ω–∞–ª–æ–≤ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è"""
        logger.info(f"–ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª {signum}, –∑–∞–≤–µ—Ä—à–∞–µ–º —Ä–∞–±–æ—Ç—É...")
        self.running = False
        sys.exit(0)
    
    def load_config(self):
        """–ó–∞–≥—Ä—É–∑–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏"""
        try:
            if not self.config_file.exists():
                logger.error("‚ùå –§–∞–π–ª –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω")
                sys.exit(1)
            
            with open(self.config_file, 'r') as f:
                self.config = yaml.safe_load(f)
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è
            required_fields = ['agent_id', 'central_server', 'agent_token', 'vps_id']
            for field in required_fields:
                if field not in self.config:
                    logger.error(f"‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ–µ –ø–æ–ª–µ: {field}")
                    sys.exit(1)
            
            logger.info(f"‚úÖ –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –∑–∞–≥—Ä—É–∂–µ–Ω–∞: {self.config['agent_id']}")
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏: {e}")
            sys.exit(1)
    
    def init_docker(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Docker –∫–ª–∏–µ–Ω—Ç–∞"""
        try:
            self.docker_client = docker.from_env()
            logger.info("‚úÖ Docker –∫–ª–∏–µ–Ω—Ç –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ Docker: {e}")
            self.docker_client = None

    def find_free_port(self, start_port: int = 8001, end_port: int = 9000) -> int:
        """–ü–æ–∏—Å–∫ —Å–≤–æ–±–æ–¥–Ω–æ–≥–æ –ø–æ—Ä—Ç–∞ –≤ –¥–∏–∞–ø–∞–∑–æ–Ω–µ"""
        try:
            import socket
            
            # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –∏—Å–ø–æ–ª—å–∑—É–µ–º—ã—Ö –ø–æ—Ä—Ç–æ–≤ –∏–∑ Docker
            used_ports = set()
            if self.docker_client:
                for container in self.docker_client.containers.list():
                    for port_binding in container.ports.values():
                        if port_binding:
                            for binding in port_binding:
                                if binding.get('HostPort'):
                                    used_ports.add(int(binding['HostPort']))
            
            # –ò—â–µ–º —Å–≤–æ–±–æ–¥–Ω—ã–π –ø–æ—Ä—Ç
            for port in range(start_port, end_port + 1):
                if port not in used_ports:
                    # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —á–µ—Ä–µ–∑ socket
                    try:
                        with socket.socket(socket.AF_INET, socket.SOCK_STREAM) as s:
                            s.bind(('localhost', port))
                            logger.info(f"‚úÖ –ù–∞–π–¥–µ–Ω —Å–≤–æ–±–æ–¥–Ω—ã–π –ø–æ—Ä—Ç: {port}")
                            return port
                    except OSError:
                        continue
            
            logger.warning(f"‚ö†Ô∏è –ù–µ –Ω–∞–π–¥–µ–Ω —Å–≤–æ–±–æ–¥–Ω—ã–π –ø–æ—Ä—Ç –≤ –¥–∏–∞–ø–∞–∑–æ–Ω–µ {start_port}-{end_port}")
            return start_port
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ —Å–≤–æ–±–æ–¥–Ω–æ–≥–æ –ø–æ—Ä—Ç–∞: {e}")
            return start_port
    
    def register_with_server(self):
        """–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∞–≥–µ–Ω—Ç–∞ –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ"""
        try:
            url = f"{self.config['central_server']}/api2/appliku/vps/register-agent"
            
            data = {
                'agent_id': self.config['agent_id'],
                'agent_version': '1.0.0',
                'system_info': {
                    'vps_id': self.config['vps_id'],
                    'status': 'online',
                    'capabilities': ['docker', 'compose', 'deploy'],
                    'timestamp': datetime.now().isoformat()
                }
            }
            
            headers = {
                'Authorization': f'Bearer {self.config["agent_token"]}',
                'Content-Type': 'application/json'
            }
            
            response = self.session.post(url, json=data, headers=headers, timeout=30)
            
            if response.status_code == 200:
                logger.info("‚úÖ –ê–≥–µ–Ω—Ç –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ")
                return True
            else:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏: {response.status_code}")
                return False
                
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏: {e}")
            return False
    
    def get_tasks(self):
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –∑–∞–¥–∞—á –æ—Ç —Å–µ—Ä–≤–µ—Ä–∞"""
        try:
            url = f"{self.config['central_server']}/api2/appliku/vps/commands"
            
            headers = {
                'Authorization': f'Bearer {self.config["agent_token"]}',
                'Content-Type': 'application/json'
            }
            
            params = {'agent_id': self.config['agent_id']}
            response = self.session.get(url, params=params, headers=headers, timeout=30)
            
            if response.status_code == 200:
                tasks = response.json()
                # API –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –∑–∞–¥–∞—á –Ω–∞–ø—Ä—è–º—É—é
                if isinstance(tasks, list):
                    return tasks
                # –ò–ª–∏ –æ–±—ä–µ–∫—Ç —Å –ø–æ–ª–µ–º tasks
                elif isinstance(tasks, dict) and 'tasks' in tasks:
                    return tasks['tasks']
                else:
                    logger.warning(f"‚ö†Ô∏è –ù–µ–æ–∂–∏–¥–∞–Ω–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –æ—Ç–≤–µ—Ç–∞: {type(tasks)}")
                    return []
            else:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∑–∞–¥–∞—á: {response.status_code}")
                return []
                
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∑–∞–¥–∞—á: {e}")
            return []
    
    def submit_task_result(self, task_id: str, result: Dict[str, Any], task: Dict[str, Any]):
        """–û—Ç–ø—Ä–∞–≤–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞–¥–∞—á–∏"""
        try:
            url = f"{self.config['central_server']}/api2/appliku/vps/command-result"
            
            data = {
                'task_id': task_id,
                'agent_id': self.config['agent_id'],
                'task_type': task.get('task_type', 'unknown'),
                'success': result.get('success', False),
                'result': result.get('result', {}),
                'error': result.get('error', ''),
                'execution_time': result.get('execution_time', 0)
            }
            
            headers = {
                'Authorization': f'Bearer {self.config["agent_token"]}',
                'Content-Type': 'application/json'
            }
            
            response = self.session.post(url, json=data, headers=headers, timeout=30)
            
            if response.status_code == 200:
                logger.info(f"‚úÖ –†–µ–∑—É–ª—å—Ç–∞—Ç –∑–∞–¥–∞—á–∏ {task_id} –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω")
                return True
            else:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞: {response.status_code}")
                return False
                
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞: {e}")
            return False
    
    def execute_task(self, task: Dict[str, Any]) -> Dict[str, Any]:
        """–í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∑–∞–¥–∞—á–∏"""
        try:
            task_type = task.get('task_type')
            task_data = task.get('data', {})
            
            logger.info(f"üöÄ –í—ã–ø–æ–ª–Ω—è–µ–º –∑–∞–¥–∞—á—É: {task_type}")
            
            start_time = time.time()
            
            if task_type == 'deploy_compose':
                result = self.deploy_compose_app(task_data)
            elif task_type == 'deploy_git':
                result = self.deploy_git_app(task_data)
            elif task_type == 'update_application':
                result = self.update_application(task_data)
            elif task_type == 'start_container':
                result = self.start_container(task_data)
            elif task_type == 'stop_container':
                result = self.stop_container(task_data)
            elif task_type == 'delete_container':
                result = self.delete_container(task_data)
            elif task_type == 'scan_containers':
                result = self.scan_containers()
            else:
                result = {'success': False, 'error': f'–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø –∑–∞–¥–∞—á–∏: {task_type}'}
            
            execution_time = time.time() - start_time
            
            return {
                'success': result.get('success', False),
                'result': result.get('result', {}),
                'error': result.get('error', ''),
                'execution_time': execution_time
            }
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞–¥–∞—á–∏: {e}")
            return {
                'success': False,
                'error': str(e),
                'execution_time': 0
            }
    
    def deploy_compose_app(self, task_data: Dict[str, Any]) -> Dict[str, Any]:
        """–†–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏–µ Docker Compose –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è"""
        try:
            app_name = task_data.get('app_name')
            compose_file = task_data.get('compose_file')
            app_id = task_data.get('app_id')
            
            logger.info(f"üöÄ –†–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ: {app_name}")
            
            # –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –¥–ª—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
            app_dir = Path(f"/opt/apppilot/apps/{app_id}")
            app_dir.mkdir(parents=True, exist_ok=True)
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º docker-compose.yml
            compose_path = app_dir / "docker-compose.yml"
            with open(compose_path, 'w') as f:
                f.write(compose_file)
            
            # –î–æ–±–∞–≤–ª—è–µ–º –ª–µ–π–±–ª—ã –¥–ª—è docker-compose
            compose_labels = {
                'appliku.app_id': app_id,
                'appliku.type': 'compose',
                'appliku.created_by': 'apppilot-agent',
                'appliku.vps_id': self.config['vps_id'],
                'appliku.deployment_time': datetime.now().isoformat()
            }
            
            # –°–æ–∑–¥–∞–µ–º .env —Ñ–∞–π–ª —Å –ª–µ–π–±–ª–∞–º–∏ –¥–ª—è docker-compose
            env_file = app_dir / ".env"
            with open(env_file, 'w') as f:
                for key, value in compose_labels.items():
                    f.write(f"{key}={value}\n")
            
            # –ó–∞–ø—É—Å–∫–∞–µ–º docker-compose
            result = subprocess.run(
                ['docker', 'compose', '-f', str(compose_path), 'up', '-d'],
                capture_output=True,
                text=True,
                cwd=app_dir
            )
            
            if result.returncode == 0:
                logger.info(f"‚úÖ –ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ {app_name} —Ä–∞–∑–≤–µ—Ä–Ω—É—Ç–æ —É—Å–ø–µ—à–Ω–æ")
                return {
                    'success': True,
                    'result': {
                        'app_id': app_id,
                        'app_name': app_name,
                        'status': 'deployed',
                        'compose_file': str(compose_path)
                    }
                }
            else:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏—è: {result.stderr}")
                return {
                    'success': False,
                    'error': result.stderr
                }
                
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏—è: {e}")
            return {
                'success': False,
                'error': str(e)
            }

    def deploy_git_app(self, task_data: Dict[str, Any]) -> Dict[str, Any]:
        """–†–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –∏–∑ Git —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è"""
        try:
            logger.info(f"üìã –ü–æ–ª—É—á–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∑–∞–¥–∞—á–∏: {task_data}")
            app_id = task_data.get('app_id')
            git_url = task_data.get('git_url')
            branch = task_data.get('branch', 'main')
            app_type = task_data.get('app_type', 'auto')
            port = task_data.get('port', 8000)
            environment_vars = task_data.get('environment_vars', {})
            
            logger.info(f"üöÄ –†–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –∏–∑ Git: {app_id}")
            logger.info(f"üì¶ Git URL: {git_url}, –≤–µ—Ç–∫–∞: {branch}")
            
            # –ï—Å–ª–∏ –ø–æ—Ä—Ç –Ω–µ —É–∫–∞–∑–∞–Ω, –∏—â–µ–º —Å–≤–æ–±–æ–¥–Ω—ã–π
            if port == 8000:
                port = self.find_free_port()
                logger.info(f"üîç –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –Ω–∞–∑–Ω–∞—á–µ–Ω –ø–æ—Ä—Ç: {port}")
            
            # –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –¥–ª—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
            app_dir = Path(f"/opt/apppilot/apps/{app_id}")
            if app_dir.exists():
                # –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –µ—Å–ª–∏ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
                import shutil
                shutil.rmtree(app_dir)
            app_dir.mkdir(parents=True, exist_ok=True)
            
            # –ö–ª–æ–Ω–∏—Ä—É–µ–º Git —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π
            logger.info("üì• –ö–ª–æ–Ω–∏—Ä—É–µ–º Git —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π...")
            clone_result = subprocess.run(
                ['git', 'clone', '-b', branch, git_url, str(app_dir)],
                capture_output=True,
                text=True,
                timeout=300
            )
            
            if clone_result.returncode != 0:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∫–ª–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è Git: {clone_result.stderr}")
                return {
                    'success': False,
                    'error': f"Git clone failed: {clone_result.stderr}"
                }
            
            logger.info("‚úÖ Git —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π –∫–ª–æ–Ω–∏—Ä–æ–≤–∞–Ω")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ Dockerfile
            dockerfile_path = app_dir / "Dockerfile"
            if not dockerfile_path.exists():
                logger.info("üîß Dockerfile –Ω–µ –Ω–∞–π–¥–µ–Ω, –≥–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏...")
                self._generate_dockerfile(app_dir, app_type, port)
            
            # –°–æ–±–∏—Ä–∞–µ–º Docker –æ–±—Ä–∞–∑
            logger.info("üèóÔ∏è –°–æ–±–∏—Ä–∞–µ–º Docker –æ–±—Ä–∞–∑...")
            # –û—á–∏—â–∞–µ–º app_id –æ—Ç –Ω–µ–¥–æ–ø—É—Å—Ç–∏–º—ã—Ö —Å–∏–º–≤–æ–ª–æ–≤ –¥–ª—è Docker —Ç–µ–≥–æ–≤
            safe_app_id = self._sanitize_app_id(app_id)
            image_name = f"apppilot-{safe_app_id}"
            build_result = subprocess.run(
                ['docker', 'build', '-t', image_name, '.'],
                capture_output=True,
                text=True,
                cwd=app_dir,
                timeout=600
            )
            
            if build_result.returncode != 0:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–±–æ—Ä–∫–∏ Docker: {build_result.stderr}")
                return {
                    'success': False,
                    'error': f"Docker build failed: {build_result.stderr}"
                }
            
            logger.info("‚úÖ Docker –æ–±—Ä–∞–∑ —Å–æ–±—Ä–∞–Ω")
            
            # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å—Ç–∞—Ä—ã–π –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä –µ—Å–ª–∏ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
            container_name = f"apppilot-{safe_app_id}"
            try:
                old_container = self.docker_client.containers.get(container_name)
                logger.info(f"üõë –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å—Ç–∞—Ä—ã–π –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä: {container_name}")
                old_container.stop()
                old_container.remove()
            except:
                pass
            
            # –ó–∞–ø—É—Å–∫–∞–µ–º –Ω–æ–≤—ã–π –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä
            logger.info(f"üöÄ –ó–∞–ø—É—Å–∫–∞–µ–º –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä –Ω–∞ –ø–æ—Ä—Ç—É {port}...")
            
            # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
            env_vars = {
                'NODE_ENV': 'production',
                'PORT': str(port)
            }
            env_vars.update(environment_vars)
            
            # –î–æ–±–∞–≤–ª—è–µ–º –ª–µ–π–±–ª—ã –¥–ª—è –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞ AppPilot
            labels = {
                'appliku.app_id': app_id,
                'appliku.type': 'git',
                'appliku.created_by': 'apppilot-agent',
                'appliku.vps_id': self.config['vps_id'],
                'appliku.deployment_time': datetime.now().isoformat(),
                'appliku.git_url': git_url,
                'appliku.branch': branch,
                'appliku.port': str(port)
            }
            
            container = self.docker_client.containers.run(
                image_name,
                name=container_name,
                ports={f'{port}/tcp': port},
                environment=env_vars,
                restart_policy={'Name': 'unless-stopped'},
                labels=labels,
                detach=True
            )
            
            logger.info(f"‚úÖ –ö–æ–Ω—Ç–µ–π–Ω–µ—Ä –∑–∞–ø—É—â–µ–Ω: {container.id}")
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º app_url
            app_url = f"http://185.135.82.248:{port}"
            
            return {
                'success': True,
                'result': {
                    'app_type': 'git',
                    'container_id': container.id,
                    'container_name': container_name,
                    'external_port': port,
                    'app_url': app_url,
                    'git_url': git_url,
                    'branch': branch,
                    'app_type_detected': app_type,
                    'status': 'running'
                }
            }
                
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏—è –∏–∑ Git: {e}")
            return {
                'success': False,
                'error': str(e)
            }

    def update_application(self, task_data: Dict[str, Any]) -> Dict[str, Any]:
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –∏–∑ Git —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è"""
        try:
            app_id = task_data.get('app_id')
            git_url = task_data.get('git_url')
            branch = task_data.get('branch', 'main')
            
            logger.info(f"üîÑ –û–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ: {app_id}")
            logger.info(f"üì¶ Git URL: {git_url}, –≤–µ—Ç–∫–∞: {branch}")
            
            # –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –¥–ª—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
            app_dir = Path(f"/opt/apppilot/apps/{app_id}")
            if not app_dir.exists():
                return {
                    'success': False,
                    'error': f"–ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ {app_id} –Ω–µ –Ω–∞–π–¥–µ–Ω–æ"
                }
            
            # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –≤ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
            os.chdir(app_dir)
            
            # –ü–æ–ª—É—á–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è
            logger.info("üì• –ü–æ–ª—É—á–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è –∏–∑ Git...")
            fetch_result = subprocess.run(
                ['git', 'fetch', 'origin'],
                capture_output=True,
                text=True,
                timeout=60
            )
            
            if fetch_result.returncode != 0:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ fetch: {fetch_result.stderr}")
                return {
                    'success': False,
                    'error': f"Git fetch failed: {fetch_result.stderr}"
                }
            
            # –ü–µ—Ä–µ–∫–ª—é—á–∞–µ–º—Å—è –Ω–∞ –Ω—É–∂–Ω—É—é –≤–µ—Ç–∫—É
            checkout_result = subprocess.run(
                ['git', 'checkout', branch],
                capture_output=True,
                text=True,
                timeout=30
            )
            
            if checkout_result.returncode != 0:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ checkout: {checkout_result.stderr}")
                return {
                    'success': False,
                    'error': f"Git checkout failed: {checkout_result.stderr}"
                }
            
            # –°–±—Ä–∞—Å—ã–≤–∞–µ–º –∫ –ø–æ—Å–ª–µ–¥–Ω–µ–º—É –∫–æ–º–º–∏—Ç—É
            reset_result = subprocess.run(
                ['git', 'reset', '--hard', f'origin/{branch}'],
                capture_output=True,
                text=True,
                timeout=30
            )
            
            if reset_result.returncode != 0:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ reset: {reset_result.stderr}")
                return {
                    'success': False,
                    'error': f"Git reset failed: {reset_result.stderr}"
                }
            
            logger.info("‚úÖ –ö–æ–¥ –æ–±–Ω–æ–≤–ª–µ–Ω –∏–∑ Git")
            
            # –ü–µ—Ä–µ—Å–æ–±–∏—Ä–∞–µ–º Docker –æ–±—Ä–∞–∑
            logger.info("üèóÔ∏è –ü–µ—Ä–µ—Å–æ–±–∏—Ä–∞–µ–º Docker –æ–±—Ä–∞–∑...")
            # –û—á–∏—â–∞–µ–º app_id –æ—Ç –Ω–µ–¥–æ–ø—É—Å—Ç–∏–º—ã—Ö —Å–∏–º–≤–æ–ª–æ–≤ –¥–ª—è Docker —Ç–µ–≥–æ–≤
            safe_app_id = self._sanitize_app_id(app_id)
            image_name = f"apppilot-{safe_app_id}"
            build_result = subprocess.run(
                ['docker', 'build', '-t', image_name, '.'],
                capture_output=True,
                text=True,
                timeout=600
            )
            
            if build_result.returncode != 0:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–±–æ—Ä–∫–∏ Docker: {build_result.stderr}")
                return {
                    'success': False,
                    'error': f"Docker build failed: {build_result.stderr}"
                }
            
            logger.info("‚úÖ Docker –æ–±—Ä–∞–∑ –ø–µ—Ä–µ—Å–æ–±—Ä–∞–Ω")
            
            # –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞–µ–º –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä
            container_name = f"apppilot-{safe_app_id}"
            try:
                container = self.docker_client.containers.get(container_name)
                logger.info(f"üîÑ –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞–µ–º –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä: {container_name}")
                
                # –û–±–Ω–æ–≤–ª—è–µ–º –ª–µ–π–±–ª—ã —Å –Ω–æ–≤—ã–º –≤—Ä–µ–º–µ–Ω–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
                container.labels.update({
                    'appliku.last_updated': datetime.now().isoformat(),
                    'appliku.update_count': str(int(container.labels.get('appliku.update_count', '0')) + 1)
                })
                
                container.restart()
            except:
                logger.error(f"‚ùå –ö–æ–Ω—Ç–µ–π–Ω–µ—Ä {container_name} –Ω–µ –Ω–∞–π–¥–µ–Ω")
                return {
                    'success': False,
                    'error': f"Container {container_name} not found"
                }
            
            logger.info(f"‚úÖ –ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ {app_id} –æ–±–Ω–æ–≤–ª–µ–Ω–æ –∏ –ø–µ—Ä–µ–∑–∞–ø—É—â–µ–Ω–æ")
            
            return {
                'success': True,
                'result': {
                    'app_id': app_id,
                    'container_id': container.id,
                    'status': 'updated',
                    'git_url': git_url,
                    'branch': branch
                }
            }
                
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è: {e}")
            return {
                'success': False,
                'error': str(e)
            }

    def _sanitize_app_id(self, app_id: str) -> str:
        """–û—á–∏—â–∞–µ—Ç app_id –æ—Ç –Ω–µ–¥–æ–ø—É—Å—Ç–∏–º—ã—Ö —Å–∏–º–≤–æ–ª–æ–≤ –¥–ª—è Docker —Ç–µ–≥–æ–≤"""
        import re
        # –£–±–∏—Ä–∞–µ–º –∫–∏—Ä–∏–ª–ª–∏—á–µ—Å–∫–∏–µ —Å–∏–º–≤–æ–ª—ã –∏ –¥—Ä—É–≥–∏–µ –Ω–µ–¥–æ–ø—É—Å—Ç–∏–º—ã–µ —Å–∏–º–≤–æ–ª—ã
        # Docker —Ç–µ–≥–∏ –º–æ–≥—É—Ç —Å–æ–¥–µ—Ä–∂–∞—Ç—å —Ç–æ–ª—å–∫–æ: [a-zA-Z0-9][a-zA-Z0-9_.-]
        sanitized = re.sub(r'[^a-zA-Z0-9_.-]', '', app_id)
        # –£–±–∏—Ä–∞–µ–º —Ç–æ—á–∫–∏ –≤ –Ω–∞—á–∞–ª–µ –∏ –∫–æ–Ω—Ü–µ
        sanitized = sanitized.strip('.')
        # –ï—Å–ª–∏ –ø–æ—Å–ª–µ –æ—á–∏—Å—Ç–∫–∏ —Å—Ç—Ä–æ–∫–∞ –ø—É—Å—Ç–∞—è, –∏—Å–ø–æ–ª—å–∑—É–µ–º fallback
        if not sanitized:
            sanitized = "app"
        # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –¥–ª–∏–Ω—É
        if len(sanitized) > 50:
            sanitized = sanitized[:50]
        logger.info(f"üîß –û—á–∏—â–µ–Ω app_id: '{app_id}' ‚Üí '{sanitized}'")
        return sanitized

    def _generate_dockerfile(self, app_dir: Path, app_type: str, port: int = 8000):
        """–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –≥–µ–Ω–µ—Ä–∞—Ü–∏—è Dockerfile"""
        try:
            dockerfile_content = ""
            
            if app_type == 'nodejs':
                dockerfile_content = f"""FROM node:18-alpine
WORKDIR /app
COPY package*.json ./
RUN npm ci --only=production
COPY . .
EXPOSE {port}
CMD ["npm", "start"]
"""
            elif app_type == 'python':
                # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –≥–ª–∞–≤–Ω—ã–π —Ñ–∞–π–ª –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
                main_file = self._find_python_main_file(app_dir)
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ requirements.txt
                if (app_dir / "requirements.txt").exists():
                    dockerfile_content = f"""FROM python:3.11-slim
WORKDIR /app
COPY requirements.txt .
RUN pip install -r requirements.txt
COPY . .
EXPOSE {port}
# –ü–æ–¥–¥–µ—Ä–∂–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
ENV PYTHONUNBUFFERED=1
ENV PORT={port}
CMD ["python", "{main_file}"]
"""
                else:
                    # –ï—Å–ª–∏ requirements.txt –Ω–µ—Ç, —Å–æ–∑–¥–∞–µ–º –±–∞–∑–æ–≤—ã–π –∏ –∏—Å–ø–æ–ª—å–∑—É–µ–º –µ–≥–æ
                    logger.info("üì¶ requirements.txt –Ω–µ –Ω–∞–π–¥–µ–Ω, —Å–æ–∑–¥–∞–µ–º –±–∞–∑–æ–≤—ã–π...")
                    self._generate_requirements_txt(app_dir)
                    dockerfile_content = f"""FROM python:3.11-slim
WORKDIR /app
COPY requirements.txt .
RUN pip install -r requirements.txt
COPY . .
EXPOSE {port}
# –ü–æ–¥–¥–µ—Ä–∂–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
ENV PYTHONUNBUFFERED=1
ENV PORT={port}
CMD ["python", "{main_file}"]
"""
            elif app_type == 'php':
                dockerfile_content = f"""FROM php:8.1-apache
WORKDIR /var/www/html
COPY . .
EXPOSE {port}
CMD ["apache2-foreground"]
"""
            else:
                # –ê–≤—Ç–æ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ç–∏–ø–∞ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
                if (app_dir / "package.json").exists():
                    dockerfile_content = f"""FROM node:18-alpine
WORKDIR /app
COPY package*.json ./
RUN npm ci --only=production
COPY . .
EXPOSE {port}
CMD ["npm", "start"]
"""
                elif (app_dir / "requirements.txt").exists():
                    dockerfile_content = f"""FROM python:3.11-slim
WORKDIR /app
COPY requirements.txt .
RUN pip install -r requirements.txt
COPY . .
EXPOSE {port}
# –ü–æ–¥–¥–µ—Ä–∂–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
ENV PYTHONUNBUFFERED=1
ENV PORT={port}
CMD ["python", "app.py"]
"""
                else:
                    dockerfile_content = f"""FROM nginx:alpine
COPY . /usr/share/nginx/html
EXPOSE {port}
CMD ["nginx", "-g", "daemon off;"]
"""
            
            # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º Dockerfile
            dockerfile_path = app_dir / "Dockerfile"
            with open(dockerfile_path, 'w') as f:
                f.write(dockerfile_content)
            
            logger.info(f"‚úÖ Dockerfile —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω –¥–ª—è —Ç–∏–ø–∞: {app_type} –Ω–∞ –ø–æ—Ä—Ç—É {port}")
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ Dockerfile: {e}")
            raise
    
    def _find_python_main_file(self, app_dir: Path) -> str:
        """–ù–∞—Ö–æ–¥–∏—Ç –≥–ª–∞–≤–Ω—ã–π —Ñ–∞–π–ª Python –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è"""
        try:
            # –°–ø–∏—Å–æ–∫ –≤–æ–∑–º–æ–∂–Ω—ã—Ö –≥–ª–∞–≤–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤ –≤ –ø–æ—Ä—è–¥–∫–µ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–∞
            possible_main_files = [
                'main.py',
                'app.py', 
                'bot.py',
                'server.py',
                'index.py',
                'run.py',
                'start.py'
            ]
            
            # –ò—â–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ —Ñ–∞–π–ª—ã
            for filename in possible_main_files:
                if (app_dir / filename).exists():
                    logger.info(f"üîç –ù–∞–π–¥–µ–Ω –≥–ª–∞–≤–Ω—ã–π —Ñ–∞–π–ª: {filename}")
                    return filename
            
            # –ï—Å–ª–∏ –Ω–µ –Ω–∞—à–ª–∏ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ —Ñ–∞–π–ª—ã, –∏—â–µ–º –ª—é–±–æ–π .py —Ñ–∞–π–ª
            py_files = list(app_dir.glob("*.py"))
            if py_files:
                main_file = py_files[0].name
                logger.info(f"üîç –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø–µ—Ä–≤—ã–π –Ω–∞–π–¥–µ–Ω–Ω—ã–π Python —Ñ–∞–π–ª: {main_file}")
                return main_file
            
            # –ï—Å–ª–∏ –Ω–∏—á–µ–≥–æ –Ω–µ –Ω–∞—à–ª–∏, —Å–æ–∑–¥–∞–µ–º –ø—Ä–æ—Å—Ç–æ–π Python —Ñ–∞–π–ª
            logger.warning("‚ö†Ô∏è –ì–ª–∞–≤–Ω—ã–π Python —Ñ–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω, —Å–æ–∑–¥–∞–µ–º –ø—Ä–æ—Å—Ç–æ–π app.py")
            self._create_simple_python_app(app_dir)
            return "app.py"
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ –≥–ª–∞–≤–Ω–æ–≥–æ Python —Ñ–∞–π–ª–∞: {e}")
            # –°–æ–∑–¥–∞–µ–º –ø—Ä–æ—Å—Ç–æ–π Python —Ñ–∞–π–ª –≤ —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏
            self._create_simple_python_app(app_dir)
            return "app.py"
    
    def _create_simple_python_app(self, app_dir: Path):
        """–°–æ–∑–¥–∞–µ—Ç –ø—Ä–æ—Å—Ç–æ–π Python —Ñ–∞–π–ª –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç"""
        try:
            app_content = '''#!/usr/bin/env python3
"""
–ü—Ä–æ—Å—Ç–æ–µ Python –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –¥–ª—è AppPilot
"""
import os
import sys
from http.server import HTTPServer, BaseHTTPRequestHandler

class SimpleHandler(BaseHTTPRequestHandler):
    def do_GET(self):
        self.send_response(200)
        self.send_header('Content-type', 'text/html')
        self.end_headers()
        
        html = f"""
        <html>
        <head><title>AppPilot Python App</title></head>
        <body>
            <h1>üöÄ Python –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω–æ!</h1>
            <p>–≠—Ç–æ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –æ—Ç AppPilot</p>
            <p>–í—Ä–µ–º—è: {__import__('datetime').datetime.now()}</p>
            <p>–ü–æ—Ä—Ç: {os.environ.get('PORT', '8000')}</p>
        </body>
        </html>
        """
        self.wfile.write(html.encode())
    
    def log_message(self, format, *args):
        # –û—Ç–∫–ª—é—á–∞–µ–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–ø—Ä–æ—Å–æ–≤
        pass

def main():
    port = int(os.environ.get('PORT', 8000))
    server = HTTPServer(('0.0.0.0', port), SimpleHandler)
    print(f"üöÄ –°–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ –ø–æ—Ä—Ç—É {port}")
    server.serve_forever()

if __name__ == "__main__":
    main()
'''
            
            app_file = app_dir / "app.py"
            with open(app_file, 'w') as f:
                f.write(app_content)
            
            logger.info("‚úÖ –°–æ–∑–¥–∞–Ω –ø—Ä–æ—Å—Ç–æ–π Python —Ñ–∞–π–ª app.py")
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è Python —Ñ–∞–π–ª–∞: {e}")
    
    def start_container(self, task_data: Dict[str, Any]) -> Dict[str, Any]:
        """–ó–∞–ø—É—Å–∫ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞"""
        try:
            container_name = task_data.get('container_name')
            
            if not self.docker_client:
                return {'success': False, 'error': 'Docker –∫–ª–∏–µ–Ω—Ç –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω'}
            
            container = self.docker_client.containers.get(container_name)
            container.start()
            
            logger.info(f"‚úÖ –ö–æ–Ω—Ç–µ–π–Ω–µ—Ä {container_name} –∑–∞–ø—É—â–µ–Ω")
            return {'success': True, 'result': {'status': 'started'}}
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞: {e}")
            return {'success': False, 'error': str(e)}
    
    def stop_container(self, task_data: Dict[str, Any]) -> Dict[str, Any]:
        """–û—Å—Ç–∞–Ω–æ–≤–∫–∞ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞"""
        try:
            container_name = task_data.get('container_name')
            
            if not self.docker_client:
                return {'success': False, 'error': 'Docker –∫–ª–∏–µ–Ω—Ç –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω'}
            
            container = self.docker_client.containers.get(container_name)
            container.stop()
            
            logger.info(f"‚úÖ –ö–æ–Ω—Ç–µ–π–Ω–µ—Ä {container_name} –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
            return {'success': True, 'result': {'status': 'stopped'}}
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞: {e}")
            return {'success': False, 'error': str(e)}
    
    def delete_container(self, task_data: Dict[str, Any]) -> Dict[str, Any]:
        """–£–¥–∞–ª–µ–Ω–∏–µ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞"""
        try:
            container_name = task_data.get('container_name')
            
            if not self.docker_client:
                return {'success': False, 'error': 'Docker –∫–ª–∏–µ–Ω—Ç –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω'}
            
            container = self.docker_client.containers.get(container_name)
            container.remove(force=True)
            
            logger.info(f"‚úÖ –ö–æ–Ω—Ç–µ–π–Ω–µ—Ä {container_name} —É–¥–∞–ª–µ–Ω")
            return {'success': True, 'result': {'status': 'deleted'}}
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞: {e}")
            return {'success': False, 'error': str(e)}
    
    def _generate_requirements_txt(self, app_dir: Path):
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –±–∞–∑–æ–≤–æ–≥–æ requirements.txt –¥–ª—è Python –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–π –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç"""
        try:
            requirements_content = """flask==2.3.3
requests==2.31.0
python-dotenv==1.0.0
pyTelegramBotAPI==4.14.0
"""
            
            requirements_file = app_dir / "requirements.txt"
            with open(requirements_file, 'w') as f:
                f.write(requirements_content)
            
            logger.info("‚úÖ –°–æ–∑–¥–∞–Ω –±–∞–∑–æ–≤—ã–π requirements.txt")
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è requirements.txt: {e}")
    
    def get_real_container_status(self, app_id: str) -> str:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Ä–µ–∞–ª—å–Ω–æ–≥–æ —Å—Ç–∞—Ç—É—Å–∞ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞ –∏–∑ Docker"""
        try:
            if not self.docker_client:
                logger.warning("‚ö†Ô∏è Docker –∫–ª–∏–µ–Ω—Ç –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
                return 'unknown'
            
            # –û—á–∏—â–∞–µ–º app_id –æ—Ç –Ω–µ–¥–æ–ø—É—Å—Ç–∏–º—ã—Ö —Å–∏–º–≤–æ–ª–æ–≤ –¥–ª—è Docker —Ç–µ–≥–æ–≤
            safe_app_id = self._sanitize_app_id(app_id)
            container_name = f"apppilot-{safe_app_id}"
            container = self.docker_client.containers.get(container_name)
            
            # –ü–æ–ª—É—á–∞–µ–º —Ä–µ–∞–ª—å–Ω—ã–π —Å—Ç–∞—Ç—É—Å –∏–∑ Docker
            real_status = container.status
            
            # –ú–∞–ø–ø–∏–Ω–≥ Docker —Å—Ç–∞—Ç—É—Å–æ–≤ –Ω–∞ AppPilot —Å—Ç–∞—Ç—É—Å—ã
            status_mapping = {
                'running': 'running',
                'exited': 'stopped', 
                'created': 'created',
                'restarting': 'restarting',
                'paused': 'paused',
                'dead': 'failed'
            }
            
            mapped_status = status_mapping.get(real_status, 'unknown')
            logger.debug(f"üîç –ö–æ–Ω—Ç–µ–π–Ω–µ—Ä {app_id}: Docker —Å—Ç–∞—Ç—É—Å '{real_status}' ‚Üí AppPilot —Å—Ç–∞—Ç—É—Å '{mapped_status}'")
            
            return mapped_status
            
        except docker.errors.NotFound:
            logger.debug(f"üîç –ö–æ–Ω—Ç–µ–π–Ω–µ—Ä {app_id} –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ Docker")
            return 'not_found'  # –ö–æ–Ω—Ç–µ–π–Ω–µ—Ä –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞ {app_id}: {e}")
            return 'error'
    
    def get_applications_from_api(self) -> list:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–π –∏–∑ API —Å–µ—Ä–≤–µ—Ä–∞"""
        try:
            url = f"{self.config['central_server']}/api2/appliku/vps/{self.config['vps_id']}/applications"
            
            headers = {
                'Authorization': f'Bearer {self.config["agent_token"]}',
                'Content-Type': 'application/json'
            }
            
            response = self.session.get(url, headers=headers, timeout=30)
            
            if response.status_code == 200:
                data = response.json()
                logger.debug(f"üîç –ü–æ–ª—É—á–µ–Ω –æ—Ç–≤–µ—Ç –æ—Ç API: {type(data)}")
                
                # API –º–æ–∂–µ—Ç –≤–æ–∑–≤—Ä–∞—â–∞—Ç—å —Å–ø–∏—Å–æ–∫ –Ω–∞–ø—Ä—è–º—É—é –∏–ª–∏ –æ–±—ä–µ–∫—Ç —Å –ø–æ–ª–µ–º applications
                if isinstance(data, list):
                    applications = data
                elif isinstance(data, dict) and 'applications' in data:
                    applications = data['applications']
                else:
                    logger.warning(f"‚ö†Ô∏è –ù–µ–æ–∂–∏–¥–∞–Ω–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –æ—Ç–≤–µ—Ç–∞: {data}")
                    return []
                
                logger.debug(f"üîç –ü–æ–ª—É—á–µ–Ω–æ {len(applications)} –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–π –∏–∑ API")
                return applications
            else:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–π: {response.status_code}")
                logger.error(f"üìù –û—Ç–≤–µ—Ç: {response.text}")
                return []
                
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–π –∏–∑ API: {e}")
            return []
    
    def update_application_status(self, app_id: str, new_status: str):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –≤ API —Å–µ—Ä–≤–µ—Ä–µ"""
        try:
            # –ü–æ–∫–∞ –ø—Ä–æ—Å—Ç–æ –ª–æ–≥–∏—Ä—É–µ–º —Ä–∞–∑–ª–∏—á–∏—è - —ç—Ç–æ –ø–æ–º–æ–∂–µ—Ç –ø–æ–Ω—è—Ç—å –ø—Ä–æ–±–ª–µ–º—É
            logger.info(f"üîÑ –ù–ê–ô–î–ï–ù–û –†–ê–ó–õ–ò–ß–ò–ï: {app_id} - —Ç–µ–∫—É—â–∏–π —Å—Ç–∞—Ç—É—Å –≤ API: 'deploying', —Ä–µ–∞–ª—å–Ω—ã–π —Å—Ç–∞—Ç—É—Å –≤ Docker: '{new_status}'")
            logger.info(f"üí° –î–ª—è –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è –Ω—É–∂–Ω–æ –æ–±–Ω–æ–≤–∏—Ç—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ {app_id} –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö")
            return True
                
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è {app_id}: {e}")
            return False
    
    def get_all_appliku_containers(self):
        """–ü–æ–ª—É—á–∞–µ—Ç –≤—Å–µ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä—ã, —Å–æ–∑–¥–∞–Ω–Ω—ã–µ AppPilot"""
        try:
            containers = []
            
            for container in self.docker_client.containers.list(all=True):
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ª–µ–π–±–ª—ã –∏–ª–∏ –∏–º–µ–Ω–∞ –¥–ª—è –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏ AppPilot –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤
                if (container.name.startswith('apppilot-') or 
                    container.labels.get('appliku.created_by') == 'apppilot-agent'):
                    
                    # –ü–æ–ª—É—á–∞–µ–º –¥–µ—Ç–∞–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–µ
                    container_info = {
                        'container_id': container.id,
                        'name': container.name,
                        'status': container.status,
                        'image': container.image.tags[0] if container.image.tags else 'unknown',
                        'created': container.attrs['Created'],
                        'ports': container.ports,
                        'labels': container.labels,
                        'app_id': container.labels.get('appliku.app_id'),
                        'app_type': container.labels.get('appliku.type'),
                        'vps_id': container.labels.get('appliku.vps_id'),
                        'git_url': container.labels.get('appliku.git_url'),
                        'branch': container.labels.get('appliku.branch'),
                        'port': container.labels.get('appliku.port'),
                        'deployment_time': container.labels.get('appliku.deployment_time')
                    }
                    
                    containers.append(container_info)
            
            logger.info(f"üîç –ù–∞–π–¥–µ–Ω–æ {len(containers)} –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤ AppPilot")
            return containers
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤ AppPilot: {e}")
            return []
    
    def sync_all_applications_status(self):
        """–°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è —Å—Ç–∞—Ç—É—Å–æ–≤ –≤—Å–µ—Ö –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–π —Å Docker"""
        try:
            logger.info("üîÑ –ù–∞—á–∏–Ω–∞—é —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—é —Å—Ç–∞—Ç—É—Å–æ–≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–π...")
            
            # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –∏–∑ API
            applications = self.get_applications_from_api()
            
            if not applications:
                logger.info("‚ÑπÔ∏è –ù–µ—Ç –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–π –¥–ª—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏")
                return
            
            updated_count = 0
            
            for app in applications:
                app_id = app.get('app_id')
                if not app_id:
                    continue
                    
                current_status = app.get('status', 'unknown')
                real_status = self.get_real_container_status(app_id)
                
                # –ï—Å–ª–∏ —Å—Ç–∞—Ç—É—Å –∏–∑–º–µ–Ω–∏–ª—Å—è, –æ–±–Ω–æ–≤–ª—è–µ–º –≤ API
                if real_status != current_status and real_status != 'error':
                    logger.info(f"üîÑ –°—Ç–∞—Ç—É—Å {app_id} –∏–∑–º–µ–Ω–∏–ª—Å—è: {current_status} ‚Üí {real_status}")
                    
                    if self.update_application_status(app_id, real_status):
                        updated_count += 1
                    else:
                        logger.warning(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å —Å—Ç–∞—Ç—É—Å {app_id}")
            
            if updated_count > 0:
                logger.info(f"‚úÖ –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞: –æ–±–Ω–æ–≤–ª–µ–Ω–æ {updated_count} –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–π")
            else:
                logger.info("‚ÑπÔ∏è –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞: –∏–∑–º–µ–Ω–µ–Ω–∏–π –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
                
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ —Å—Ç–∞—Ç—É—Å–æ–≤: {e}")
    
    def scan_containers(self):
        """–°–∫–∞–Ω–∏—Ä—É–µ—Ç –≤—Å–µ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä—ã –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –Ω–∏—Ö"""
        try:
            logger.info("üîç –ù–∞—á–∏–Ω–∞—é —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –≤—Å–µ—Ö –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤")
            logger.info("üîç DEBUG: –ú–µ—Ç–æ–¥ scan_containers –≤—ã–∑–≤–∞–Ω")
            
            containers = []
            
            # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä—ã (–≤–∫–ª—é—á–∞—è –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ)
            all_containers = self.docker_client.containers.list(all=True)
            
            for container in all_containers:
                try:
                    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞ –ø–æ –ª–µ–π–±–ª–∞–º –∏ –∏–º–µ–Ω–∏
                    container_type = "unknown"
                    app_id = None
                    
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ª–µ–π–±–ª—ã AppPilot
                    if container.labels.get('appliku.created_by') == 'apppilot-agent':
                        container_type = "apppilot"
                        app_id = container.labels.get('appliku.app_id')
                    elif container.name.startswith('apppilot-'):
                        container_type = "apppilot"
                        app_id = container.name.replace('apppilot-', '')
                    elif container.name in ['appliku-agent', 'agent-appliku-agent']:
                        container_type = "system"
                    elif container.name.startswith('python_api_server-'):
                        container_type = "system"
                    elif container.name.startswith('postgres-') or container.name.startswith('redis-'):
                        container_type = "system"
                    elif container.name.startswith('nginx-'):
                        container_type = "system"
                    else:
                        container_type = "other"
                    
                    # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ—Ä—Ç–∞—Ö
                    ports_info = {}
                    if container.attrs.get('NetworkSettings', {}).get('Ports'):
                        for port_binding in container.attrs['NetworkSettings']['Ports'].values():
                            if port_binding:
                                for binding in port_binding:
                                    host_port = binding.get('HostPort')
                                    container_port = binding.get('ContainerPort')
                                    if host_port and container_port:
                                        ports_info[f"{host_port}->{container_port}"] = f"http://185.135.82.248:{host_port}"
                    
                    container_info = {
                        'container_id': container.id,
                        'name': container.name,
                        'status': container.status,
                        'image': container.image.tags[0] if container.image.tags else 'unknown',
                        'created': container.attrs['Created'],
                        'ports': ports_info,
                        'labels': container.labels,
                        'container_type': container_type,
                        'app_id': app_id,
                        'app_url': list(ports_info.values())[0] if ports_info else None
                    }
                    
                    containers.append(container_info)
                    
                except Exception as e:
                    logger.warning(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–µ {container.name}: {e}")
                    continue
            
            logger.info(f"‚úÖ –°–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ: –Ω–∞–π–¥–µ–Ω–æ {len(containers)} –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤")
            
            result_data = {
                'success': True,
                'result': {
                    'containers': containers,
                    'total_count': len(containers),
                    'apppilot_count': len([c for c in containers if c['container_type'] == 'apppilot']),
                    'system_count': len([c for c in containers if c['container_type'] == 'system']),
                    'other_count': len([c for c in containers if c['container_type'] == 'other'])
                }
            }
            
            logger.info(f"üîç DEBUG: –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç: {result_data}")
            return result_data
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤: {e}")
            return {
                'success': False,
                'error': str(e)
            }
    
    def run(self):
        """–û—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª —Ä–∞–±–æ—Ç—ã –∞–≥–µ–Ω—Ç–∞"""
        try:
            logger.info("üöÄ AppPilot Agent –∑–∞–ø—É—â–µ–Ω")
            
            # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º—Å—è –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ
            if not self.register_with_server():
                logger.error("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ")
                return False
            
            logger.info("‚úÖ –ê–≥–µ–Ω—Ç –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω, –Ω–∞—á–∏–Ω–∞–µ–º —Ä–∞–±–æ—Ç—É...")
            
            # –û—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞–¥–∞—á
            last_sync_time = time.time()
            sync_interval = 180  # 3 –º–∏–Ω—É—Ç—ã
            
            while self.running:
                try:
                    current_time = time.time()
                    
                    # –ü–æ–ª—É—á–∞–µ–º –∑–∞–¥–∞—á–∏
                    tasks = self.get_tasks()
                    
                    for task in tasks:
                        if not self.running:
                            break
                        
                        task_id = task.get('id')
                        task_status = task.get('status')
                        
                        if not task_id:
                            continue
                        
                        # –í—ã–ø–æ–ª–Ω—è–µ–º —Ç–æ–ª—å–∫–æ –∑–∞–¥–∞—á–∏ —Å–æ —Å—Ç–∞—Ç—É—Å–æ–º 'pending'
                        if task_status != 'pending':
                            logger.info(f"‚è≠Ô∏è –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –∑–∞–¥–∞—á—É {task_id} —Å–æ —Å—Ç–∞—Ç—É—Å–æ–º '{task_status}'")
                            continue
                        
                        # –í—ã–ø–æ–ª–Ω—è–µ–º –∑–∞–¥–∞—á—É
                        result = self.execute_task(task)
                        
                        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
                        self.submit_task_result(task_id, result, task)
                    
                    # –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä—É–µ–º —Å—Ç–∞—Ç—É—Å—ã –∫–∞–∂–¥—ã–µ 3 –º–∏–Ω—É—Ç—ã
                    if current_time - last_sync_time >= sync_interval:
                        logger.info("‚è∞ –í—Ä–µ–º—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ —Å—Ç–∞—Ç—É—Å–æ–≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–π")
                        self.sync_all_applications_status()
                        last_sync_time = current_time
                    
                    # –ñ–¥–µ–º –ø–µ—Ä–µ–¥ —Å–ª–µ–¥—É—é—â–µ–π –ø—Ä–æ–≤–µ—Ä–∫–æ–π
                    time.sleep(30)
                    
                except Exception as e:
                    logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ –æ—Å–Ω–æ–≤–Ω–æ–º —Ü–∏–∫–ª–µ: {e}")
                    time.sleep(60)
            
            return True
            
        except Exception as e:
            logger.error(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
            return False

def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    agent = AppPilotAgent()
    
    try:
        success = agent.run()
        if success:
            logger.info("‚úÖ AppPilot Agent —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–∏–ª —Ä–∞–±–æ—Ç—É")
            sys.exit(0)
        else:
            logger.error("‚ùå AppPilot Agent –∑–∞–≤–µ—Ä—à–∏–ª—Å—è —Å –æ—à–∏–±–∫–æ–π")
            sys.exit(1)
    except KeyboardInterrupt:
        logger.info("üõë –†–∞–±–æ—Ç–∞ –ø—Ä–µ—Ä–≤–∞–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
        sys.exit(0)
    except Exception as e:
        logger.error(f"‚ùå –ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞: {e}")
        sys.exit(1)

if __name__ == "__main__":
    main()
